blueprint:
  name: Zooz Light Switch
  description: Trigger actions from button presses
  domain: automation
  input:
    light_switch:
      name: Zooz Light Switch
      description: The Zooz Light Switch that will trigger the actions
      selector:
        device:
          integration: zwave_js
          manufacturer: Zooz
    helper_last_controller_event:
      name: Helper - Last Controller Event
      description: Input Text used to store the last event fired by the controller.
      default: ''
      selector:
        entity:
          domain: input_text
    old_firmware:
      name: Old Firmware
      description: Enable if the Up and Down actions are reversed
      default: false
      selector:
        boolean: {}
    press_up_1x:
      name: 1x Press Up
      description: Pick an action for when the light switch UP button is pressed once.
      default:
      selector:
        action: {}
    press_up_2x:
      name: 2x Press Up
      description: Pick an action for when the light switch UP button is pressed twice.
      default:
      selector:
        action: {}
    press_up_3x:
      name: 3x Press Up
      description: Pick an action for when the light switch UP button is pressed three
        times.
      default:
      selector:
        action: {}
    press_up_4x:
      name: 4x Press Up
      description: Pick an action for when the light switch UP button is pressed four
        times.
      default:
      selector:
        action: {}
    press_up_5x:
      name: 5x Press Up
      description: Pick an action for when the light switch UP button is pressed five
        times.
      default:
      selector:
        action: {}
    up_held_until_released:
      name: Up Held Until Released
      description: Pick an action for when the light switch UP button is held until released.
      default:
      selector:
        action: {}
    press_down_1x:
      name: 1x Press Down
      description: Pick an action for when the light switch DOWN button is pressed
        once.
      default:
      selector:
        action: {}
    press_down_2x:
      name: 2x Press Down
      description: Pick an action for when the light switch DOWN button is pressed
        twice.
      default:
      selector:
        action: {}
    press_down_3x:
      name: 3x Press Down
      description: Pick an action for when the light switch DOWN button is pressed
        three times.
      default:
      selector:
        action: {}
    press_down_4x:
      name: 4x Press Down
      description: Pick an action for when the light switch DOWN button is pressed
        four times.
      default:
      selector:
        action: {}
    press_down_5x:
      name: 5x Press Down
      description: Pick an action for when the light switch DOWN button is pressed
        five times.
      default:
      selector:
        action: {}
    down_held_until_released:
      name: Down Held Until Released
      description: Pick an action for when the light switch DOWN button is held until released.
      default:
      selector:
        action: {}
  source_url: https://github.com/sans-1/hass-custom/blob/main/blueprints/zen27_repeat-held.yaml
mode: parallel
max: 10
trigger:
- platform: event
  event_type: zwave_js_value_notification
  event_data:
    command_class: 91
    device_id: !input 'light_switch'
- platform: event
  event_type: zwave_js_event
  event_data:
    command_class: 91
    device_id: !input 'light_switch'
action:
- variables:
    scene_id: '{{ trigger.event.data.property_key_name }}'
    scene_value: '{{ trigger.event.data.value }}'
    helper_last_controller_event: !input 'helper_last_controller_event'
    old_firmware: !input 'old_firmware'
    up_scene: '{% if old_firmware == true %} 002 {% else %} 001 {% endif %}'
    down_scene: '{% if old_firmware == true %} 001 {% else %} 002 {% endif %}'
    trigger_delta: '{{ (as_timestamp(now()) - as_timestamp((states(helper_last_controller_event)
      | from_json).last_triggered if helper_last_controller_event is not none and
      (states(helper_last_controller_event) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$"))
      else "1970-01-01 00:00:00")) * 1000 }}'
    last_scene_id: '{{ (states(helper_last_controller_event) | from_json).scene_id
      if helper_last_controller_event is not none and (states(helper_last_controller_event)
      | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "" }}'
    last_scene_value: '{{ (states(helper_last_controller_event) | from_json).scene_value
      if helper_last_controller_event is not none and (states(helper_last_controller_event)
      | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "" }}'
- service: input_text.set_value
  data:
    entity_id: !input 'helper_last_controller_event'
    value: '{{ {"scene_id":scene_id,"scene_value":scene_value,"last_triggered":now()|string} | to_json }}'
- choose:
  - conditions:
    - '{{ scene_id == up_scene }}'
    - '{{ scene_value == ''KeyPressed'' }}'
    sequence: !input 'press_up_1x'
  - conditions:
    - '{{ scene_id == up_scene }}'
    - '{{ scene_value == ''KeyPressed2x'' }}'
    sequence: !input 'press_up_2x'
  - conditions:
    - '{{ scene_id == up_scene }}'
    - '{{ scene_value == ''KeyPressed3x'' }}'
    sequence: !input 'press_up_3x'
  - conditions:
    - '{{ scene_id == up_scene }}'
    - '{{ scene_value == ''KeyPressed4x'' }}'
    sequence: !input 'press_up_4x'
  - conditions:
    - '{{ scene_id == up_scene }}'
    - '{{ scene_value == ''KeyPressed5x'' }}'
    sequence: !input 'press_up_5x'
  - conditions:
    - '{{ scene_id == up_scene }}'
    - '{{ scene_value == ''KeyHeldDown'' }}'
    sequence: !input 'up_held_until_released'
  - conditions:
    - '{{ scene_id == down_scene }}'
    - '{{ scene_value == ''KeyPressed'' }}'
    sequence: !input 'press_down_1x'
  - conditions:
    - '{{ scene_id == down_scene }}'
    - '{{ scene_value == ''KeyPressed2x'' }}'
    sequence: !input 'press_down_2x'
  - conditions:
    - '{{ scene_id == down_scene }}'
    - '{{ scene_value == ''KeyPressed3x'' }}'
    sequence: !input 'press_down_3x'
  - conditions:
    - '{{ scene_id == down_scene }}'
    - '{{ scene_value == ''KeyPressed4x'' }}'
    sequence: !input 'press_down_4x'
  - conditions:
    - '{{ scene_id == down_scene }}'
    - '{{ scene_value == ''KeyPressed5x'' }}'
    sequence: !input 'press_down_5x'
  - conditions:
    - '{{ scene_id == down_scene }}'
    - '{{ scene_value == ''KeyHeldDown'' }}'
    sequence: !input 'down_held_until_released'
