blueprint:
  name: 'ZEN27 Dimmmer Light Switch (Brightness/Temperature)'
  source_url: 'https://github.com/sans-1/hass-custom/blob/main/blueprints/zen27_repeat-held.yaml'
  description:
    'Control a RGBW/RGB+CCT/CCT light with Zooz ZEN27 dimmer light switch // 
     Features: 
      - Press Up/Down button once to turn light on/off / 
      - Hold Up/Down button to gradually increase/decrease brightness / 
      - Press Down button, then hold Up button to gradually increase color temperature to be warmer / 
      - Press Up button, then hold Down button to gradually decrease color temperature to be cooler'
  domain: automation
  input:
    light_switch:
      name: 'ZEN27 Switch'
      description: 'ZEN27 Dimmmer Light Switch to control light [REQUIRED]'
      selector:
        device:
          integration: zwave_js
          manufacturer: Zooz
    light:
      name: 'Light (RGBW/RGB+CCT/CCT)'
      description: 'Light to be controlled by ZEN27 switch [REQUIRED]'
      selector:
        entity:
          domain: light
    helper_last_controller_event:
      name: 'Helper - Last Controller Event'
      description: 'Input Text helper entity (Length >= 250) to store last event fired as JSON string [REQUIRED]'
      selector:
        entity:
          domain: input_text
    step:
      name: 'Step Percentage While Held'
      description: 'Percentage increased/decreased per step while the Up/Down button is held'
      default: 10
      selector:
        number:
          min: 1
          max: 20
          step: 1
          unit_of_measurement: '%'
          mode: slider
    press_up_2x:
      name: 'Up: Pressed x 2'
      description: 'Action to execute when Up button is pressed twice'
      default:
      selector:
        action: {}
    press_up_3x:
      name: 'Up: Pressed x 3'
      description: 'Action to execute when Up button is pressed three times'
      default:
      selector:
        action: {}
    press_up_4x:
      name: 'Up: Pressed x 4'
      description: 'Action to execute when Up button is pressed four times'
      default:
      selector:
        action: {}
    press_up_5x:
      name: 'Up: Pressed x 5'
      description: 'Action to execute when Up button is pressed five times'
      default:
      selector:
        action: {}
    press_down_2x:
      name: 'Down: Pressed x 2'
      description: 'Action to execute when Down button is pressed twice'
      default:
      selector:
        action: {}
    press_down_3x:
      name: 'Down: Pressed x 3'
      description: 'Action to execute when Down button is pressed three times'
      default:
      selector:
        action: {}
    press_down_4x:
      name: 'Down: Pressed x 4'
      description: 'Action to execute when Down button is pressed four times'
      default:
      selector:
        action: {}
    press_down_5x:
      name: 'Down: Pressed x 5'
      description: 'Action to execute when Down button is pressed five times'
      default:
      selector:
        action: {}
    reverse_up-down:
      name: 'Reverse Up/Down'
      description: 'Enable only if Up & Down actions are reversed (e.g. old firmware)'
      default: false
      selector:
        boolean: {}
    delay_press_hold:
      name: 'Maximum Delay from Press to Hold'
      description: 'Maximum number of milliseconds between pressing & releasing the Up/Down button and then pressing & holding the opposite button'
      default: 2000
      selector:
        number:
          min: 100
          max: 5000
          step: 10
          unit_of_measurement: milliseconds
          mode: slider
    color_temp_min:
      name: 'Default: Min Color Temperature'
      description: 'Minimum color temperature value in mireds for light with undefined [min_mireds] attribute'
      default: 155
      selector:
        number:
          min: 151
          max: 689
          step: 1
          unit_of_measurement: mireds
          mode: slider
    color_temp_max:
      name: 'Default: Max Color Temperature'
      description: 'Maximum color temperature value in mireds for light with undefined [max_mireds] attribute'
      default: 495
      selector:
        number:
          min: 151
          max: 689
          step: 1
          unit_of_measurement: mireds
          mode: slider
variables:
  scene_id: '{{ trigger.event.data.property_key_name }}'
  scene_value: '{{ trigger.event.data.value }}'
  reverse: !input 'reverse_up-down'
  up_scene: '{% if not reverse %} 001 {% else %} 002 {% endif %}'
  down_scene: '{% if not reverse %} 002 {% else %} 001 {% endif %}'
  light: !input 'light'
  helper_last_controller_event: !input 'helper_last_controller_event'
  step: !input 'step'
  step_transition: '{{ step|int/10) }}'
  max_delay: !input 'delay_press_hold'
  color_temp_min: !input 'color_temp_min'
  color_temp_max: !input 'color_temp_max'
  light_min_mireds: '{{ state_attr(light,"min_mireds") if state_attr(light,"min_mireds") is not none else color_temp_min|int }}'
  light_max_mireds: '{{ state_attr(light,"max_mireds") if state_attr(light,"max_mireds") is not none else color_temp_max|int }}'
  color_temp_step: '{{ (((light_max_mireds|int - light_min_mireds|int)/100) * step|int)|int }}'
  last_scene_id: '{{ (states(helper_last_controller_event)|from_json).scene_id if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "" }}'
  last_scene_value: '{{ (states(helper_last_controller_event)|from_json).scene_value if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "" }}'
  last_hold_type: '{{ (states(helper_last_controller_event)|from_json).hold_type if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "" }}'
  trigger_delta: '{{ (as_timestamp(now()) - as_timestamp((states(helper_last_controller_event)|from_json).timestamp if helper_last_controller_event is not none and (states(helper_last_controller_event)|regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "1970-01-01 00:00:00")) * 1000 }}'
  debug_trigger_condition: '{{ not(scene_id == last_scene_id and scene_value == last_scene_value) or is_state(light,"off") }}'
mode: restart
max_exceeded: silent
trigger:
- platform: event
  event_type: zwave_js_value_notification
  event_data:
    command_class: 91
    device_id: !input 'light_switch'
action:
- service: input_text.set_value
  target:
    entity_id: !input 'helper_last_controller_event'
  data:
    value: '{{ {"scene_id":scene_id,"scene_value":scene_value,"hold_type":"","timestamp":now()|string}|to_json }}'
- service: homeassistant.update_entity
  target:
    entity_id: !input 'light'
- choose:
  - conditions: '{{ scene_id == up_scene and scene_value == "KeyPressed" and is_state(light,"off") }}'
    sequence:
      - service: homeassistant.turn_on
        target:
          entity_id: !input 'light'
  - conditions: '{{ scene_id == up_scene and scene_value == "KeyPressed2x" }}'
    sequence: !input 'press_up_2x'
  - conditions: '{{ scene_id == up_scene and scene_value == "KeyPressed3x" }}'
    sequence: !input 'press_up_3x'
  - conditions: '{{ scene_id == up_scene and scene_value == "KeyPressed4x" }}'
    sequence: !input 'press_up_4x'
  - conditions: '{{ scene_id == up_scene and scene_value == "KeyPressed5x" }}'
    sequence: !input 'press_up_5x'
  - conditions: '{{ (scene_id == up_scene and scene_value == "KeyHeldDown" and is_state(light,"on") and last_hold_type != "brightness") and ((last_scene_id == down_scene and last_scene_value == "KeyPressed" and trigger_delta|int <= max_delay|int) or last_hold_type == "color_temp") }}'
    sequence:
      - service: input_text.set_value
        target:
          entity_id: !input 'helper_last_controller_event'
        data:
          value: '{{ {"scene_id":scene_id,"scene_value":scene_value,"hold_type":"color_temp","timestamp":now()|string}|to_json }}'
      - repeat:
          while: []
          sequence:
            - service: light.turn_on
              target:
                entity_id: !input 'light'
              data:
                color_temp: '{% if (state_attr(light,"color_temp")|int + color_temp_step|int) > light_max_mireds|int %} {{ light_max_mireds|int }} {% else %} {{ state_attr(light,"color_temp")|int + color_temp_step|int }} {% endif %}'
                transition: '{{ step_transition }}'
            - delay:
                seconds: '{{ step_transition }}'
            - service: homeassistant.update_entity
              target:
                entity_id: !input 'light'
  - conditions: '{{ scene_id == up_scene and scene_value == "KeyHeldDown" and is_state(light,"on") and last_hold_type != "color_temp" }}'
    sequence:
      - service: input_text.set_value
        target:
          entity_id: !input 'helper_last_controller_event'
        data:
          value: '{{ {"scene_id":scene_id,"scene_value":scene_value,"hold_type":"brightness","timestamp":now()|string}|to_json }}'
      - repeat:
          while: []
          sequence:
            - service: light.turn_on
              target:
                entity_id: !input 'light'
              data:
                brightness_step_pct: '{{ step|int }}'
                transition: '{{ step_transition }}'
            - delay:
                seconds: '{{ step_transition }}'
            - service: homeassistant.update_entity
              target:
                entity_id: !input 'light'
  - conditions: '{{ scene_id == down_scene and scene_value == "KeyPressed" and is_state(light,"on") }}'
    sequence:
      - delay:
          milliseconds: '{{ max_delay|int }}'
      - service: homeassistant.turn_off
        target:
          entity_id: !input 'light'
  - conditions: '{{ scene_id == down_scene and scene_value == "KeyPressed2x" }}'
    sequence: !input 'press_down_2x'
  - conditions: '{{ scene_id == down_scene and scene_value == "KeyPressed3x" }}'
    sequence: !input 'press_down_3x'
  - conditions: '{{ scene_id == down_scene and scene_value == "KeyPressed4x" }}'
    sequence: !input 'press_down_4x'
  - conditions: '{{ scene_id == down_scene and scene_value == "KeyPressed5x" }}'
    sequence: !input 'press_down_5x'
  - conditions: '{{ (scene_id == down_scene and scene_value == "KeyHeldDown" and is_state(light,"on") and last_hold_type != "brightness") and ((last_scene_id == up_scene and last_scene_value == "KeyPressed" and trigger_delta|int <= max_delay|int) or last_hold_type == "color_temp") }}'
    sequence:
      - service: input_text.set_value
        target:
          entity_id: !input 'helper_last_controller_event'
        data:
          value: '{{ {"scene_id":scene_id,"scene_value":scene_value,"hold_type":"color_temp","timestamp":now()|string}|to_json }}'
      - repeat:
          while: []
          sequence:
            - service: light.turn_on
              target:
                entity_id: !input 'light'
              data:
                color_temp: '{% if (state_attr(light,"color_temp")|int - color_temp_step|int) < light_min_mireds|int %} {{ light_min_mireds|int }} {% else %} {{ state_attr(light,"color_temp")|int - color_temp_step|int }} {% endif %}'
                transition: '{{ step_transition }}'
            - delay:
                seconds: '{{ step_transition }}'
            - service: homeassistant.update_entity
              target:
                entity_id: !input 'light'
  - conditions: '{{ scene_id == down_scene and scene_value == "KeyHeldDown" and is_state(light,"on") and last_hold_type != "color_temp" }}'
    sequence:
      - service: input_text.set_value
        target:
          entity_id: !input 'helper_last_controller_event'
        data:
          value: '{{ {"scene_id":scene_id,"scene_value":scene_value,"hold_type":"brightness","timestamp":now()|string}|to_json }}'
      - repeat:
          while: []
          sequence:
            - service: light.turn_on
              target:
                entity_id: !input 'light'
              data:
                brightness_step_pct: '{{ step|int * -1 }}'
                transition: '{{ step_transition }}'
            - delay:
                seconds: '{{ step_transition }}'
            - service: homeassistant.update_entity
              target:
                entity_id: !input 'light'
  default: []
