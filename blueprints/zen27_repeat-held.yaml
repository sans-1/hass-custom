blueprint:
  name: ZEN27 Dimmer Light Switch
  description: Trigger actions from pressing & holding buttons
  domain: automation
  input:
    light_switch:
      name: ZEN27 Switch
      description: ZEN27 Switch that will control the designated light
      selector:
        device:
          integration: zwave_js
          manufacturer: Zooz
    light:
      name: Light
      description: Light to be controlled
      selector:
        entity:
          domain: light
    helper_last_controller_event:
      name: Helper - Last Controller Event
      description: Input Text to store the last event fired
      selector:
        entity:
          domain: input_text
    old_firmware:
      name: Old Firmware
      description: Enable if the Up & Down actions are reversed
      default: false
      selector:
        boolean: {}
    press_up_1x:
      name: 1x Press Up
      description: Pick an action when the Up button is pressed once
      default:
      selector:
        action: {}
    press_up_2x:
      name: 2x Press Up
      description: Pick an action when the Up button is pressed twice
      default:
      selector:
        action: {}
    press_up_3x:
      name: 3x Press Up
      description: Pick an action when the Up button is pressed three times
      default:
      selector:
        action: {}
    press_up_4x:
      name: 4x Press Up
      description: Pick an action when the Up button is pressed four times
      default:
      selector:
        action: {}
    press_up_5x:
      name: 5x Press Up
      description: Pick an action when the Up button is pressed five times
      default:
      selector:
        action: {}
    press_down_1x:
      name: 1x Press Down
      description: Pick an action when the Down button is pressed once
      default:
      selector:
        action: {}
    press_down_2x:
      name: 2x Press Down
      description: Pick an action when the Down button is pressed twice
      default:
      selector:
        action: {}
    press_down_3x:
      name: 3x Press Down
      description: Pick an action when the Down button is pressed three times
      default:
      selector:
        action: {}
    press_down_4x:
      name: 4x Press Down
      description: Pick an action when the Down button is pressed four times
      default:
      selector:
        action: {}
    press_down_5x:
      name: 5x Press Down
      description: Pick an action when the Down button is pressed five times
      default:
      selector:
        action: {}
    step:
      name: Step Percentage While Held
      description: Step Percentage increased/decreased per 0.5 seconds when the Up/Down button is held
      default: 10
      selector:
        number:
          min: 1
          max: 20
          step: 1
          unit_of_measurement: "%"
          mode: slider
    color_temp_min:
      name: Minimum Color Temperature
      description: Minimum color temperature value in mireds for light entities with undefined 'min_mireds' attribute.
      default: 155
      selector:
        number:
          min: 151
          max: 689
          step: 1
          unit_of_measurement: mireds
          mode: slider
    color_temp_max:
      name: Maximum Color Temperature
      description: Maximum color temperature value in mireds for light entities with undefined 'max_mireds' attribute.
      default: 495
      selector:
        number:
          min: 151
          max: 689
          step: 1
          unit_of_measurement: mireds
          mode: slider
  source_url: https://github.com/sans-1/hass-custom/blob/main/blueprints/zen27_repeat-held.yaml
mode: parallel
max: 10
trigger:
- platform: event
  event_type: zwave_js_value_notification
  event_data:
    command_class: 91
    device_id: !input "light_switch"
- platform: event
  event_type: zwave_js_event
  event_data:
    command_class: 91
    device_id: !input "light_switch"
action:
- variables:
    scene_id: '{{ trigger.event.data.property_key_name }}'
    scene_value: '{{ trigger.event.data.value }}'
    light: !input "light"
    helper_last_controller_event: !input "helper_last_controller_event"
    old_firmware: !input "old_firmware"
    step: !input "step"
    color_temp_min: !input "color_temp_min"
    color_temp_max: !input "color_temp_max"
    up_scene: '{% if old_firmware == false %} 001 {% else %} 002 {% endif %}'
    down_scene: '{% if old_firmware == false %} 002 {% else %} 001 {% endif %}'
    trigger_delta: '{{ (as_timestamp(now()) - as_timestamp((states(helper_last_controller_event) | from_json).last_triggered if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "1970-01-01 00:00:00")) * 1000 }}'
    last_scene_id: '{{ (states(helper_last_controller_event) | from_json).scene_id if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "" }}'
    last_scene_value: '{{ (states(helper_last_controller_event) | from_json).scene_value if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "" }}'
    light_min_mireds: '{{ state_attr(light,"min_mireds") if state_attr(light,"min_mireds") is not none else color_temp_min|int }}'
    light_max_mireds: '{{ state_attr(light,"max_mireds") if state_attr(light,"max_mireds") is not none else color_temp_max|int }}'
    light_color_temp: '{{ state_attr(light,"color_temp") if state_attr(light,"color_temp") is not none else (light_max_mireds|int - light_min_mireds|int)/2 }}'
    color_temp_step: '{{ ((light_max_mireds|int - light_min_mireds|int)/100) * step|int }}'
- service: input_text.set_value
  target:
    entity_id: !input "helper_last_controller_event"
  data:
    value: '{{ {"scene_id":scene_id,"scene_value":scene_value,"last_triggered":now()|string} | to_json }}'
- choose:
  - conditions: '{{ scene_id == up_scene and scene_value == "KeyPressed" }}'
    sequence: !input "press_up_1x"
  - conditions: '{{ scene_id == up_scene and scene_value == "KeyPressed2x" }}'
    sequence: !input "press_up_2x"
  - conditions: '{{ scene_id == up_scene and scene_value == "KeyPressed3x" }}'
    sequence: !input "press_up_3x"
  - conditions: '{{ scene_id == up_scene and scene_value == "KeyPressed4x" }}'
    sequence: !input "press_up_4x"
  - conditions: '{{ scene_id == up_scene and scene_value == "KeyPressed5x" }}'
    sequence: !input "press_up_5x"
  - conditions: '{{ scene_id == up_scene and scene_value == "KeyHeldDown" and is_state(light,"on") }}'
    sequence:
      - repeat:
          until: '{{ ((states(helper_last_controller_event) | from_json).scene_id if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "") == up_scene and ((states(helper_last_controller_event) | from_json).scene_value if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "") == "KeyReleased" }}'
          sequence:
            - service: light.turn_on
              target:
                entity_id: !input "light"
              data:
                brightness_step_pct: '{{ step|int }}'
                transition: 0.5
            - delay:
                milliseconds: 500
  - conditions: '{{ scene_id == up_scene and scene_value == "KeyHeldDown" and last_scene_id == up_scene and last_scene_value == "KeyPressed" and trigger_delta|int <= 2000 and is_state(light,"on") }}'
    sequence:
      - repeat:
          until: '{{ ((states(helper_last_controller_event) | from_json).scene_id if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "") == up_scene and ((states(helper_last_controller_event) | from_json).scene_value if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "") == "KeyReleased" }}'
          sequence:
            - service: light.turn_on
              target:
                entity_id: !input "light"
              data:
                color_temp: '{% if (light_color_temp|int + color_temp_step|int) > light_max_mireds|int %} {{ light_max_mireds|int }} {% else %} {{ light_color_temp|int + color_temp_step|int }} {% endif %}'
                transition: 0.5
            - delay:
                milliseconds: 500
  - conditions: '{{ scene_id == down_scene and scene_value == "KeyPressed" }}'
    sequence: !input "press_down_1x"
  - conditions: '{{ scene_id == down_scene and scene_value == "KeyPressed2x" }}'
    sequence: !input "press_down_2x"
  - conditions: '{{ scene_id == down_scene and scene_value == "KeyPressed3x" }}'
    sequence: !input "press_down_3x"
  - conditions: '{{ scene_id == down_scene and scene_value == "KeyPressed4x" }}'
    sequence: !input "press_down_4x"
  - conditions: '{{ scene_id == down_scene and scene_value == "KeyPressed5x" }}'
    sequence: !input "press_down_5x"
  - conditions: '{{ scene_id == down_scene and scene_value == "KeyHeldDown" and is_state(light,"on") }}'
    sequence:
      - repeat:
          until: '{{ ((states(helper_last_controller_event) | from_json).scene_id if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "") == down_scene and ((states(helper_last_controller_event) | from_json).scene_value if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "") == "KeyReleased" }}'
          sequence:
            - service: light.turn_on
              target:
                entity_id: !input "light"
              data:
                brightness_step_pct: '{{ step|int * -1 }}'
                transition: 0.5
            - delay:
                milliseconds: 500
  - conditions: '{{ scene_id == down_scene and scene_value == "KeyHeldDown" and last_scene_id == down_scene and last_scene_value == "KeyPressed" and trigger_delta|int <= 2000 and is_state(light,"on") }}'
    sequence:
      - repeat:
          until: '{{ ((states(helper_last_controller_event) | from_json).scene_id if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "") == down_scene and ((states(helper_last_controller_event) | from_json).scene_value if helper_last_controller_event is not none and (states(helper_last_controller_event) | regex_match("^\{(\".*\": \".*\"(, )?)*\}$")) else "") == "KeyReleased" }}'
          sequence:
            - service: light.turn_on
              target:
                entity_id: !input "light"
              data:
                color_temp: '{% if (light_color_temp|int - color_temp_step|int) < light_min_mireds|int %} {{ light_min_mireds|int }} {% else %} {{ light_color_temp|int - color_temp_step|int }} {% endif %}'
                transition: 0.5
            - delay:
                milliseconds: 500
  default: []
